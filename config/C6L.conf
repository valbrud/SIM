import numpy as np
from Sources import IntensityHarmonic3D, PlaneWave
from Box import Box
from VectorOperations import VectorOperations

theta = np.pi / 4
b = 1
k = 2 * np.pi
k1 = k * np.sin(theta)
k2 = k * (np.cos(theta) - 1)

vec_x = np.array((k * np.sin(theta), 0, k * np.cos(theta)))
vec_mx = np.array((-k * np.sin(theta), 0, k * np.cos(theta)))
ax_z = np.array((0, 0, 1))

a0 = 2 + 6 * b**2
sources = [
    IntensityHarmonic3D(-b**2/a0, 0, np.array((2 * k1, 0, 0))),
    IntensityHarmonic3D(-b ** 2/a0, 0, np.array((-2 * k1, 0, 0))),
    IntensityHarmonic3D(b ** 2/a0, 0, np.array((k1, 0, 0))),
    IntensityHarmonic3D(b ** 2/a0, 0, np.array((-k1, 0, 0))),
    IntensityHarmonic3D(-b ** 2/a0, 0, np.array((-k1, 3**0.5*k1, 0))),
    IntensityHarmonic3D(-b ** 2/a0, 0, np.array((k1, 3**0.5*k1, 0))),
    IntensityHarmonic3D(-b ** 2/a0, 0, np.array((-k1, -3**0.5*k1, 0))),
    IntensityHarmonic3D(-b ** 2/a0, 0, np.array((k1, -3**0.5*k1, 0))),
    IntensityHarmonic3D(-b ** 2/a0, 0, np.array((0, 3**0.5*k1, 0))),
    IntensityHarmonic3D(-b ** 2/a0, 0, np.array((0, -3**0.5*k1, 0))),

    IntensityHarmonic3D((2 + 6 * b**2)/a0, 0, np.array((0, 0, 0))),

    IntensityHarmonic3D(b**2/a0, 0, np.array((k1/2, 3**0.5/2 * k1, 0))),
    IntensityHarmonic3D(b**2/a0, 0, np.array((-k1/2, 3**0.5/2 * k1, 0))),
    IntensityHarmonic3D(b**2/a0, 0, np.array((k1/2, -3**0.5/2 * k1, 0))),
    IntensityHarmonic3D(b**2/a0, 0, np.array((-k1/2, -3**0.5/2 * k1, 0))),

    IntensityHarmonic3D(-b**2/a0, 0, np.array((3/2 * k1, -3**0.5/2 * k1, 0))),
    IntensityHarmonic3D(-b**2/a0, 0, np.array((-3/2 * k1, -3**0.5/2 * k1, 0))),
    IntensityHarmonic3D(-b**2/a0, 0, np.array((3/2 * k1, 3**0.5/2 * k1, 0))),
    IntensityHarmonic3D(-b**2/a0, 0, np.array((-3/2 * k1, 3**0.5/2 * k1, 0))),

    IntensityHarmonic3D((1j * b)/a0, 0, np.array((-k1, 0, k2))),
    IntensityHarmonic3D((1j * b)/a0, 0, np.array((-k1, 0, -k2))),
    IntensityHarmonic3D((-1j * b)/a0, 0, np.array((k1, 0, k2))),
    IntensityHarmonic3D((-1j * b)/a0, 0, np.array((k1, 0, -k2))),

    IntensityHarmonic3D((2*3**0.5 - 2j)/4 * b/a0, 0, np.array((k1/2, 3**0.5/2 * k1, -k2))),
    IntensityHarmonic3D((-2*3**0.5 - 2j)/4 * b/a0, 0, np.array((k1/2, -3**0.5/2 * k1, -k2))),
    IntensityPlaneWave((2*3**0.5 + 2j)/4 * b/a0, 0, np.array((-k1/2, 3**0.5/2 * k1, -k2))),
    IntensityPlaneWave((-2*3**0.5 + 2j)/4 * b/a0, 0, np.array((-k1/2, -3**0.5/2 * k1, -k2))),

    IntensityPlaneWave((-2*3**0.5 - 2j)/4 * b/a0, 0, np.array((k1/2, 3**0.5/2 * k1, k2))),
    IntensityPlaneWave((2*3**0.5 - 2j)/4 * b/a0, 0, np.array((k1/2, -3**0.5/2 * k1, k2))),
    IntensityPlaneWave((-2*3**0.5 + 2j)/4 * b/a0, 0, np.array((-k1/2, 3**0.5/2 * k1, k2))),
    IntensityPlaneWave((2*3**0.5 + 2j)/4 * b/a0, 0, np.array((-k1/2, -3**0.5/2 * k1, k2))),


    PlaneWave(0, b/a0**0.5, 0, 0, vec_x),
    PlaneWave(0, b/a0**0.5, 0, 0, vec_mx),
    PlaneWave(0, b/a0**0.5, 0, 0, VectorOperations.rotate_vector3d(vec_x, ax_z, 2 * np.pi/3)),
    PlaneWave(0, b/a0**0.5, 0, 0, VectorOperations.rotate_vector3d(vec_mx, ax_z, 2 * np.pi/3)),
    PlaneWave(0, b/a0**0.5, 0, 0, VectorOperations.rotate_vector3d(vec_x, ax_z, 4 * np.pi/3)),
    PlaneWave(0, b/a0**0.5, 0, 0, VectorOperations.rotate_vector3d(vec_mx, ax_z, 4 * np.pi/3)),

    # PlaneWave(1/a0**0.5, 1j /a0**0.5, 0, 0, np.array((0, 0, k))),
]

info = """
b = {}
""".format(b)
box_size = (10, 10, 40)
point_number = 100
